// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "../dbml"
  outputName = "crypto-comerce.dbml"
}

model User {
  id            String          @id @default(cuid())
  accounts      Account[]
  Authenticator Authenticator[]
  cart          Cart?           @relation(fields: [cartId], references: [id])
  cartId        Int?            @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  name          String?
  orders        Order[]
  reviews       Review[]
  role          String?
  sessions      Session[]
  wallets       Wallet[]
  warranties    Warranty[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("Users")
}

model Account {
  id                String   @id @default(cuid())
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  providerAccountId String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@map("Accounts")
}

model Session {
  id           String   @id @default(cuid())
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("Sessions")
}

model VerificationToken {
  expires    DateTime
  identifier String
  token      String

  @@unique([identifier, token])
  @@map("VerificationTokens")
}

model Authenticator {
  counter              Int
  credentialBackedUp   Boolean
  credentialDeviceType String
  credentialID         String  @unique
  credentialPublicKey  String
  providerAccountId    String
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String

  @@id([userId, credentialID])
  @@map("Authenticators")
}

model Wallet {
  id            Int      @id @default(autoincrement())
  chainId       String
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
  walletAddress String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("wallets")
}

model Warranty {
  id             Int      @id @default(autoincrement())
  expiryTime     DateTime
  isActive       Boolean  @default(false)
  Product        Product?
  productId      Int
  tokenId        String   @unique
  user           User?    @relation(fields: [userId], references: [id])
  userId         String?
  warrantyPeriod Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("warranties")
}

model Product {
  id          Int        @id @default(autoincrement())
  carts       Cart[]
  categories  Category[]
  colors      Color[]
  description String?
  image       String?
  name        String
  price       Int?
  quantity    Int?
  reviews     Review[]
  sizes       Size[]
  warranty    Warranty?  @relation(fields: [warrantyId], references: [id])
  warrantyId  Int?       @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([name])
  @@map("products")
}

model Cart {
  id        Int       @id @default(autoincrement())
  products  Product[]
  user      User?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("carts")
}

model Order {
  id        Int      @id @default(autoincrement())
  price     Int
  quantity  Int
  status    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model Category {
  id        Int       @id @default(autoincrement())
  category  String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Size {
  id        Int       @id @default(autoincrement())
  size      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("sizes")
}

model Color {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("colors")
}

model Review {
  id        Int      @id @default(autoincrement())
  content   String
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  rating    Int
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}
