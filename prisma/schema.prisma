// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          String          @default("user")
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  warranties    Warranty[]
  wallets       Wallet[]
  orders        Order[]
  cart          Cart?           @relation(fields: [cartId], references: [id])
  cartId        Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("Users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationTokens")
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("Authenticators")
}

model Wallet {
  id            Int      @id @default(autoincrement())
  walletAddress String
  chainId       String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("wallets")
}

model Warranty {
  id             Int      @id @default(autoincrement())
  tokenId        String
  warrantyPeriod String
  expiryTime     DateTime
  isActive       Boolean  @default(false)
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  Product        Product?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("warranties")
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  image       String?
  price       Int?
  quantity    Int?
  warranty    Warranty? @relation(fields: [warrantyId], references: [id])
  warrantyId  Int?      @unique
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  sizes       Size[]    @relation("ProductSizes")
  colors      Color[]   @relation("ProductColors")
  carts       Cart[]    @relation("CartProducts")
  reviews     Review[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([name])
  @@map("products")
}

model Cart {
  id        Int       @id @default(autoincrement())
  products  Product[] @relation("CartProducts")
  user      User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("carts")
}

model Order {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  quantity  Int
  price     Int
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Size {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[] @relation("ProductSizes")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("sizes")
}

model Color {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[] @relation("ProductColors")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("colors")
}

model Review {
  id        Int      @id @default(autoincrement())
  content   String
  rating    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}
